# This CloudFormation will deploy the Product API.
# The API can configure a cache, which is configured inside each method's settings,
# as well as the `Cache-Control` header returned by the method's integration.
#
# Resource level method settings are configured on the `AWS::ApiGateway::Stage`
# resource, which controls the level of metrics, logging and throttling.
#
# A monitoring stack has been configured and creates a CloudWatch dashboard,
# enabling monitoring & alerting.
#
# A StageWeight parameter is used to determine the amount of traffic that this
# deployment will receive, if it has been deployed alongside another deployment.

AWSTemplateFormatVersion: '2010-09-09'

Description: Product API

Parameters:

  DomainZoneName:
    Type: String
    Description: |
      A Route 53 Hosted Zone Name, such as "notonthehighstreet.com"

  DomainName:
    Type: String
    Description: |
      A Route 53 Domain alias for the Product Api, such as "api". The DomainZoneName
      parameter will be appended to this value.

  DomainCertificateArn:
    Type: String
    Description: |
      The AWS ARN of a Domain HTTPS Certificate

  Stage:
    Type: String
    ConstraintDescription: |
      Alpha-numeric characters only.
    Description: |
      The name of the API Gateway stage to deploy to.
    AllowedPattern: "^[a-zA-Z0-9]*$"

  StageWeight:
    Type: Number
    ConstraintDescription: |
      R53 Weight of 1-255. Where 255/256ths (255/1+255).
    Description: |
      A stage resource record set weighting, determining the distribution of
      traffic that this stage will receive.
    Default: 1
    MinValue: 1
    MaxValue: 255

  CacheEnabled:
    Type: String
    Default: "No"
    ConstraintDescription: |
      A value of Yes or No must be supplied.
    Description: |
      Will the deployed API have a cache enabled?
    AllowedValues:
      - "Yes"
      - "No"

  CacheSize:
    Type: String
    Default: "0.5"
    Description: If the cache is enabled, what size in GB?
    AllowedValues:
      - "0.5"
      - "1.6"
      - "6.1"

Conditions:

  CacheEnabled: !Equals [ !Ref CacheEnabled, "Yes" ]

Resources:

  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        MeasureLatency: true
        FullyQualifiedDomainName: !Sub "${DomainName}.${DomainZoneName}"
        ResourcePath: /health
        RequestInterval: 10
        FailureThreshold: 2
      HealthCheckTags:
      - Key: Name
        Value: Product API
      - Key: Stage
        Value: !Ref Stage

  Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainZoneName}."
      RecordSets:
        - SetIdentifier: !Sub "${AWS::Region}/${DomainName}.${DomainZoneName}/${Stage}/${StageWeight}"
          Name: !Sub "${DomainName}.${DomainZoneName}."
          Weight: !Ref StageWeight
          Type: A
          HealthCheckId: !Ref HealthCheck
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            EvaluateTargetHealth: true
            DNSName: !GetAtt ApiDomainName.DistributionDomainName

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      FailOnWarnings: true
      BodyS3Location: ../out/api.json

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Stage
      DeploymentId: !Ref ApiDeployment
      CacheClusterEnabled:
        Fn::If:
          - CacheEnabled
          - true
          - false
      CacheClusterSize:
        Fn::If:
          - CacheEnabled
          - !Ref CacheSize
          - !Ref AWS::NoValue
      MethodSettings:
        - ResourcePath: /health
          HttpMethod: GET
          LoggingLevel: ERROR
          DataTraceEnabled: false
          MetricsEnabled: true
          CachingEnabled: false
      Variables:
        ExecutionRoleName: !Ref ApiGatewayExecutionRole

  ApiAccount:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayExecutionRole.Arn

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/API-Gateway-Execution-Logs_${ApiGateway}"
      RetentionInDays: 1

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${DomainName}.${DomainZoneName}"
      CertificateArn: !Ref DomainCertificateArn

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiStage

  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub "/${AWS::StackName}/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                Fn::Sub: "apigateway.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  Monitoring:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./monitoring.yml
      TimeoutInMinutes: 5
      Parameters:
        DashboardName: !Sub "${AWS::StackName}-${Stage}"
        RestApiName: !Ref AWS::StackName
        RestApiStage: !Ref Stage

# Outputs:
#
#  MonitoringDashboard:
#    Description: CloudWatch Dashboard Monitoring URL
#    Value: !GetAtt Monitoring.Outputs.DashboardUrl
